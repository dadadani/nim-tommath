import os

const path = currentSourcePath() / ".." / "libtommath"


{.used.}

when defined(useExternalTommath):
    {.passL: "-ltommath".}
else: 
    {.passC: "-I" & path.}
    {.compile: path / "mp_abs.c".}
    {.compile: path / "mp_add.c".}
    {.compile: path / "mp_add_d.c".}
    {.compile: path / "mp_addmod.c".}
    {.compile: path / "mp_and.c".}
    {.compile: path / "mp_clamp.c".}
    {.compile: path / "mp_clear.c".}
    {.compile: path / "mp_clear_multi.c".}
    {.compile: path / "mp_cmp.c".}
    {.compile: path / "mp_cmp_d.c".}
    {.compile: path / "mp_cmp_mag.c".}
    {.compile: path / "mp_cnt_lsb.c".}
    {.compile: path / "mp_complement.c".}
    {.compile: path / "mp_copy.c".}
    {.compile: path / "mp_count_bits.c".}
    {.compile: path / "mp_cutoffs.c".}
    {.compile: path / "mp_div.c".}
    {.compile: path / "mp_div_2.c".}
    {.compile: path / "mp_div_2d.c".}
    {.compile: path / "mp_div_d.c".}
    {.compile: path / "mp_dr_is_modulus.c".}
    {.compile: path / "mp_dr_reduce.c".}
    {.compile: path / "mp_dr_setup.c".}
    {.compile: path / "mp_error_to_string.c".}
    {.compile: path / "mp_exch.c".}
    {.compile: path / "mp_expt_n.c".}
    {.compile: path / "mp_exptmod.c".}
    {.compile: path / "mp_exteuclid.c".}
    {.compile: path / "mp_fread.c".}
    {.compile: path / "mp_from_sbin.c".}
    {.compile: path / "mp_from_ubin.c".}
    {.compile: path / "mp_gcd.c".}
    {.compile: path / "mp_get_double.c".}
    {.compile: path / "mp_get_i32.c".}
    {.compile: path / "mp_get_i64.c".}
    {.compile: path / "mp_get_l.c".}
    {.compile: path / "mp_get_mag_u32.c".}
    {.compile: path / "mp_get_mag_u64.c".}
    {.compile: path / "mp_get_mag_ul.c".}
    {.compile: path / "mp_init.c".}
    {.compile: path / "mp_init_copy.c".}
    {.compile: path / "mp_init_i32.c".}
    {.compile: path / "mp_init_i64.c".}
    {.compile: path / "mp_init_l.c".}
    {.compile: path / "mp_init_multi.c".}
    {.compile: path / "mp_init_set.c".}
    {.compile: path / "mp_init_u32.c".}
    {.compile: path / "mp_init_u64.c".}
    {.compile: path / "mp_init_ul.c".}
    {.compile: path / "mp_invmod.c".}
    {.compile: path / "mp_is_square.c".}
    {.compile: path / "mp_kronecker.c".}
    {.compile: path / "mp_lcm.c".}
    {.compile: path / "mp_lshd.c".}
    {.compile: path / "mp_mod.c".}
    {.compile: path / "mp_mod_2d.c".}
    {.compile: path / "mp_montgomery_calc_normalization.c".}
    {.compile: path / "mp_montgomery_reduce.c".}
    {.compile: path / "mp_montgomery_setup.c".}
    {.compile: path / "mp_mul_2.c".}
    {.compile: path / "mp_mul_2d.c".}
    {.compile: path / "mp_mul_d.c".}
    {.compile: path / "mp_mulmod.c".}
    {.compile: path / "mp_neg.c".}
    {.compile: path / "mp_or.c".}
    {.compile: path / "mp_pack.c".}
    {.compile: path / "mp_pack_count.c".}
    {.compile: path / "mp_prime_fermat.c".}
    {.compile: path / "mp_prime_frobenius_underwood.c".}
    {.compile: path / "mp_prime_is_prime.c".}
    {.compile: path / "mp_prime_miller_rabin.c".}
    {.compile: path / "mp_prime_next_prime.c".}
    {.compile: path / "mp_prime_rabin_miller_trials.c".}
    {.compile: path / "mp_prime_rand.c".}
    {.compile: path / "mp_prime_strong_lucas_selfridge.c".}
    {.compile: path / "mp_radix_size.c".}
    {.compile: path / "mp_radix_size_overestimate.c".}
    {.compile: path / "mp_rand.c".}
    {.compile: path / "mp_rand_source.c".}
    {.compile: path / "mp_read_radix.c".}
    {.compile: path / "mp_reduce.c".}
    {.compile: path / "mp_reduce_2k.c".}
    {.compile: path / "mp_reduce_2k_l.c".}
    {.compile: path / "mp_reduce_2k_setup.c".}
    {.compile: path / "mp_reduce_2k_setup_l.c".}
    {.compile: path / "mp_reduce_is_2k.c".}
    {.compile: path / "mp_reduce_is_2k_l.c".}
    {.compile: path / "mp_reduce_setup.c".}
    {.compile: path / "mp_root_n.c".}
    {.compile: path / "mp_rshd.c".}
    {.compile: path / "mp_sbin_size.c".}
    {.compile: path / "mp_set.c".}
    {.compile: path / "mp_set_double.c".}
    {.compile: path / "mp_set_i32.c".}
    {.compile: path / "mp_set_i64.c".}
    {.compile: path / "mp_set_l.c".}
    {.compile: path / "mp_set_u32.c".}
    {.compile: path / "mp_set_u64.c".}
    {.compile: path / "mp_set_ul.c".}
    {.compile: path / "mp_shrink.c".}
    {.compile: path / "mp_signed_rsh.c".}
    {.compile: path / "mp_sqrmod.c".}
    {.compile: path / "mp_sqrt.c".}
    {.compile: path / "mp_sqrtmod_prime.c".}
    {.compile: path / "mp_sub.c".}
    {.compile: path / "mp_sub_d.c".}
    {.compile: path / "mp_submod.c".}
    {.compile: path / "mp_to_radix.c".}
    {.compile: path / "mp_to_sbin.c".}
    {.compile: path / "mp_to_ubin.c".}
    {.compile: path / "mp_ubin_size.c".}
    {.compile: path / "mp_unpack.c".}
    {.compile: path / "mp_xor.c".}
    {.compile: path / "mp_zero.c".}
    {.compile: path / "s_mp_add.c".}
    {.compile: path / "s_mp_copy_digs.c".}
    {.compile: path / "s_mp_div_3.c".}
    {.compile: path / "s_mp_div_recursive.c".}
    {.compile: path / "s_mp_div_small.c".}
    {.compile: path / "s_mp_exptmod.c".}
    {.compile: path / "s_mp_exptmod_fast.c".}
    {.compile: path / "s_mp_get_bit.c".}
    {.compile: path / "s_mp_invmod.c".}
    {.compile: path / "s_mp_invmod_odd.c".}
    {.compile: path / "s_mp_log_2expt.c".}
    {.compile: path / "s_mp_montgomery_reduce_comba.c".}
    {.compile: path / "s_mp_mul_balance.c".}
    {.compile: path / "s_mp_mul_karatsuba.c".}
    {.compile: path / "s_mp_mul_toom.c".}
    {.compile: path / "s_mp_prime_is_divisible.c".}
    {.compile: path / "s_mp_prime_tab.c".}
    {.compile: path / "s_mp_radix_map.c".}
    {.compile: path / "s_mp_radix_size_overestimate.c".}
    {.compile: path / "s_mp_rand_platform.c".}
    {.compile: path / "s_mp_sqr_comba.c".}
    {.compile: path / "s_mp_sqr_karatsuba.c".}
    {.compile: path / "s_mp_sqr_toom.c".}
    {.compile: path / "s_mp_sub.c".}
    {.compile: path / "s_mp_zero_buf.c".}
    {.compile: path / "s_mp_zero_digs.c".}
    {.compile: path / "mp_2expt.c".}
    {.compile: path / "mp_fwrite.c".}
    {.compile: path / "mp_grow.c".}
    {.compile: path / "mp_hash.c".}
    {.compile: path / "mp_init_size.c".}
    {.compile: path / "mp_log.c".}
    {.compile: path / "mp_log_n.c".}
    {.compile: path / "mp_mul.c".}
    {.compile: path / "s_mp_div_school.c".}
    {.compile: path / "s_mp_fp_log.c".}
    {.compile: path / "s_mp_fp_log_d.c".}
    {.compile: path / "s_mp_mul.c".}
    {.compile: path / "s_mp_mul_comba.c".}
    {.compile: path / "s_mp_mul_high.c".}
    {.compile: path / "s_mp_mul_high_comba.c".}
    {.compile: path / "s_mp_sqr.c".}

